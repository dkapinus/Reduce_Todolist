{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/Todolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport s from './Todolist.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todolist = _ref => {\n  _s();\n  let {\n    title,\n    FilterNameButton,\n    removeTask,\n    AddMessage,\n    onChangeCheckInput,\n    filter,\n    task,\n    ...props\n  } = _ref;\n  const onClickHandler = (todolistID, nameButton) => {\n    FilterNameButton(todolistID, nameButton);\n  };\n  const onClickHandlerDeleteTask = id => {\n    removeTask(id);\n  };\n  let [valueInput, setValueInput] = useState('');\n  const onChangeInputHandler = event => {\n    setValueInput(event.currentTarget.value);\n  };\n  let [error, setError] = useState('');\n  const onclickHandlerAddMessage = () => {\n    if (valueInput.trim() !== '') {\n      AddMessage(valueInput.trim());\n    } else setError('Title is reqiured');\n    setValueInput('');\n    Error();\n  };\n  const Error = () => {\n    if (valueInput.trim() !== '') {\n      setError('');\n    }\n  };\n  const onKeyDownInput = event => {\n    if (event.key === 'Enter') {\n      onclickHandlerAddMessage();\n    }\n  };\n  const onKeyPressInput = event => {\n    if (event.key === '13') {\n      onclickHandlerAddMessage();\n    }\n  };\n  const onChangeCheckInputHandler = (idCheck, event) => {\n    onChangeCheckInput(idCheck, event);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: error ? s.errorInput : '',\n      onChange: onChangeInputHandler,\n      value: valueInput,\n      onKeyDown: onKeyDownInput,\n      onKeyPress: onKeyPressInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onclickHandlerAddMessage,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.errorMessage,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: task.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: el.isDone === true ? s.active : '',\n          children: [el.title, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: el.isDone,\n            onChange: event => onChangeCheckInputHandler(el.id, event.currentTarget.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onClickHandlerDeleteTask(el.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 26\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: filter === 'All' ? s.filter : '',\n      onClick: () => onClickHandler(props.todolistID, 'All'),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: filter === 'Active' ? s.filter : '',\n      onClick: () => onClickHandler(props.todolistID, 'Active'),\n      children: \"Active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: filter === 'Completed' ? s.filter : '',\n      onClick: () => onClickHandler(props.todolistID, 'Completed'),\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(Todolist, \"geukEC1keZR/OauyzKwWYY5rmvc=\");\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","s","Todolist","title","FilterNameButton","removeTask","AddMessage","onChangeCheckInput","filter","task","props","onClickHandler","todolistID","nameButton","onClickHandlerDeleteTask","id","valueInput","setValueInput","onChangeInputHandler","event","currentTarget","value","error","setError","onclickHandlerAddMessage","trim","Error","onKeyDownInput","key","onKeyPressInput","onChangeCheckInputHandler","idCheck","errorInput","errorMessage","map","el","isDone","active","checked"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\nimport {ButtonFilterType} from \"./App\";\nimport s from './Todolist.module.css'\n\ntype  TodolistType = {\n    todolistID:string\n    title:string\n    FilterNameButton:(todolistID:string,nameButton:ButtonFilterType)=>void\n    removeTask:(id:string)=>void\n    AddMessage:(valueInput:string)=>void\n    onChangeCheckInput:(idCheck:string,event:boolean)=>void\n    filter:ButtonFilterType\n    task:TaskType[]\n}\n\ntype TaskType = {\n       id:string,\n       title:string,\n       isDone:boolean\n}\n\nexport const Todolist:React.FC<TodolistType> = ({\n                                                    title,\n                                                    FilterNameButton,\n                                                    removeTask,\n                                                    AddMessage,\n                                                    onChangeCheckInput,\n                                                    filter,\n                                                    task,\n                                                    ...props\n                                                }) => {\n    const onClickHandler = (todolistID:string,nameButton:ButtonFilterType)=> {\n        FilterNameButton(todolistID,nameButton)\n    }\n\n    const  onClickHandlerDeleteTask= (id:string)=> {\n        removeTask(id)\n    }\n\n    let [valueInput,setValueInput]=useState('')\n\n    const onChangeInputHandler = (event:ChangeEvent<HTMLInputElement>)=> {\n     setValueInput(event.currentTarget.value)\n    }\n\n    let [error,setError]=useState<string|null>('')\n\n    const onclickHandlerAddMessage = ()=> {\n        if(valueInput.trim()!==''){AddMessage(valueInput.trim())}\n        else (setError('Title is reqiured'))\n\n        setValueInput('')\n       Error()\n    }\n\n    const Error = ()=> {\n        if(valueInput.trim()!==''){setError('')}\n    }\n\n    const onKeyDownInput = (event:KeyboardEvent<HTMLInputElement>)=> {\n        if(event.key==='Enter'){onclickHandlerAddMessage()}\n    }\n\n    const onKeyPressInput = (event:KeyboardEvent<HTMLInputElement>)=> {\n        if(event.key==='13'){onclickHandlerAddMessage()}\n    }\n\n    const onChangeCheckInputHandler = (idCheck:string,event:boolean)=> {\n        onChangeCheckInput(idCheck,event)\n    }\n    return (\n        <div>\n            <h3>{title}</h3>\n            <input  className={error ? s.errorInput :''} onChange={onChangeInputHandler} value={valueInput} onKeyDown={onKeyDownInput} onKeyPress={onKeyPressInput}/>\n            <button onClick={onclickHandlerAddMessage}>Add</button>\n            {error &&<div className={s.errorMessage}>{error}</div>}\n            <ul>{task.map((el)=>{\n                return ( <li key={el.id} className={el.isDone===true ? s.active : ''}>\n                    {el.title}\n                    <input type={\"checkbox\"} checked={el.isDone} onChange={(event:ChangeEvent<HTMLInputElement>)=>onChangeCheckInputHandler(el.id,event.currentTarget.checked)}  />\n                    <button onClick={()=>onClickHandlerDeleteTask(el.id)}>X</button>\n                </li>)\n            })}\n\n            </ul>\n               <button className={filter==='All' ? s.filter :''} onClick={()=>onClickHandler(props.todolistID,'All')}>All</button>\n               <button className={filter==='Active' ? s.filter :''} onClick={()=>onClickHandler(props.todolistID,'Active')}>Active</button>\n               <button className={filter==='Completed' ? s.filter :''} onClick={()=>onClickHandler(props.todolistID,'Completed')}>Completed</button>\n\n        </div>\n    );\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}