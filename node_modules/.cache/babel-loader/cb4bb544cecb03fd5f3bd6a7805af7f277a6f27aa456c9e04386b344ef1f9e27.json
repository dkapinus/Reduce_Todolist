{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { v1 } from 'uuid';\nimport { Todolist } from \"./Todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let todoListsID1 = v1();\n  let todoListsID2 = v1();\n  let [todoLists, SetTodoLists] = useState([{\n    id: todoListsID1,\n    title: \"Whats to learn\",\n    filter: \"All\"\n  }, {\n    id: todoListsID2,\n    title: \"Whats to buy\",\n    filter: \"All\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todoListsID1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todoListsID2]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }]\n  });\n  // let [tasks, setTasks] = useState([\n  //         {id: v1(), title: \"HTML&CSS\", isDone: true},\n  //         {id: v1(), title: \"JS\", isDone: true},\n  //         {id: v1(), title: \"ReactJS\", isDone: false},\n  //         {id: v1(), title: \"Rest API\", isDone: false},\n  //         {id: v1(), title: \"GraphQL\", isDone: false},\n  //     ])\n\n  // let [filter,setFilter]=useState<ButtonFilterType>('All')\n\n  const FilterNameButton = (todolistID, nameButton) => {\n    SetTodoLists(todoLists.map(el => el.id === todolistID ? {\n      ...el,\n      filter: nameButton\n    } : el));\n    // setFilter(nameButton)\n  };\n\n  const removeTask = id => {\n\n    // let newTask=tasks.filter((el)=>el.id !==id)\n    // setTasks(newTask)\n  };\n  const AddMessage = valueInput => {\n    // let newTask ={id: v1(), title: valueInput, isDone: true}\n    // setTasks([newTask,...tasks])\n  };\n  const CheckInput = (idCheck, event) => {\n\n    // setTasks(tasks.map((el)=>el.id===idCheck ? {...el,isDone:event}:el))\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todoLists.map(el => {\n      const FilteredTask = () => {\n        let newTask = tasks[el.id];\n        if (el.filter === 'Active') {\n          newTask = tasks[el.id].filter(el => el.isDone === false);\n        }\n        if (el.filter === 'Completed') {\n          newTask = tasks[el.id].filter(el => el.isDone === true);\n        }\n        return newTask;\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Todolist, {\n          todolistID: el.id,\n          title: el.title,\n          task: FilteredTask(),\n          FilterNameButton: FilterNameButton,\n          removeTask: removeTask,\n          AddMessage: AddMessage,\n          filter: el.filter,\n          onChangeCheckInput: CheckInput\n        }, el.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"bTwxFZavxO0pJq+Fi3SsjFpFSHY=\");\n_c = App;\nexport default App;\n\n//-------------------------------------------------------------------------------------------------------\n//\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\n//\n// function App() {\n//\n//     let [tasks, setTasks] = useState([\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]);\n//\n//     function removeTask(id: string) {\n//         let filteredTasks = tasks.filter(t => t.id != id);\n//         setTasks(filteredTasks);\n//     }\n//\n//     function addTask(title: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         let newTasks = [task, ...tasks];\n//         setTasks(newTasks);\n//     }\n//\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n//\n//     let tasksForTodolist = tasks;\n//\n//     if (filter === \"active\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\n//     }\n//     if (filter === \"completed\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\n//     }\n//\n//     function changeFilter(value: FilterValuesType) {\n//         setFilter(value);\n//     }\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <input placeholder={'A lot of boring information'}/>\n//                     <div>\n//                         <button>Boring Button 1</button>\n//                         <button>Boring Button 2</button>\n//                         <button>Boring Button 3</button>\n//                     </div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}/>\n//         </div>\n//     );\n// }\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","Todolist","App","todoListsID1","todoListsID2","todoLists","SetTodoLists","id","title","filter","tasks","setTasks","isDone","FilterNameButton","todolistID","nameButton","map","el","removeTask","AddMessage","valueInput","CheckInput","idCheck","event","FilteredTask","newTask"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React,{useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid'\r\nimport {Todolist} from \"./Todolist\";\r\n\r\nexport type ButtonFilterType ='All'|'Active'|'Completed'\r\n\r\ntype TodoListsType = {id: string, title: string, filter: ButtonFilterType}\r\n\r\nfunction App() {\r\n\r\n    let todoListsID1=v1()\r\n    let todoListsID2=v1()\r\n\r\n    let [todoLists, SetTodoLists] = useState<TodoListsType[]>([\r\n        {id: todoListsID1, title: \"Whats to learn\", filter: \"All\"},\r\n        {id: todoListsID2, title: \"Whats to buy\", filter: \"All\"},\r\n\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todoListsID1]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todoListsID2]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n    });\r\n    // let [tasks, setTasks] = useState([\r\n    //         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //         {id: v1(), title: \"JS\", isDone: true},\r\n    //         {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //         {id: v1(), title: \"Rest API\", isDone: false},\r\n    //         {id: v1(), title: \"GraphQL\", isDone: false},\r\n    //     ])\r\n\r\n   // let [filter,setFilter]=useState<ButtonFilterType>('All')\r\n\r\n         const FilterNameButton = (todolistID:string,nameButton:ButtonFilterType)=> {\r\n\r\n             SetTodoLists(todoLists.map((el)=>el.id===todolistID ? {...el,filter:nameButton}: el))\r\n        // setFilter(nameButton)\r\n        }\r\n\r\n\r\n\r\n    const removeTask = (id:string)=> {\r\n\r\n        // let newTask=tasks.filter((el)=>el.id !==id)\r\n        // setTasks(newTask)\r\n    }\r\n    const AddMessage =(valueInput:string)=> {\r\n        // let newTask ={id: v1(), title: valueInput, isDone: true}\r\n        // setTasks([newTask,...tasks])\r\n    }\r\n\r\n\r\n    const CheckInput=(idCheck:string,event:boolean)=> {\r\n\r\n         // setTasks(tasks.map((el)=>el.id===idCheck ? {...el,isDone:event}:el))\r\n\r\n\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            {todoLists.map((el)=>{\r\n                const FilteredTask=()=> {\r\n                    let newTask=tasks[el.id]\r\n                    if(el.filter==='Active'){newTask=tasks[el.id].filter((el)=>el.isDone===false)}\r\n                    if(el.filter==='Completed'){newTask=tasks[el.id].filter((el)=>el.isDone===true)}\r\n                    return newTask\r\n                }\r\n                return(\r\n                    <div>\r\n                        <Todolist\r\n                            todolistID={el.id}\r\n                            key={el.id}\r\n                            title={el.title}\r\n                            task={FilteredTask()}\r\n                            FilterNameButton={FilterNameButton}\r\n                            removeTask={removeTask}\r\n                            AddMessage={AddMessage}\r\n                            filter={el.filter}\r\n                            onChangeCheckInput={CheckInput}/>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\n//\r\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]);\r\n//\r\n//     function removeTask(id: string) {\r\n//         let filteredTasks = tasks.filter(t => t.id != id);\r\n//         setTasks(filteredTasks);\r\n//     }\r\n//\r\n//     function addTask(title: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         let newTasks = [task, ...tasks];\r\n//         setTasks(newTasks);\r\n//     }\r\n//\r\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n//\r\n//     let tasksForTodolist = tasks;\r\n//\r\n//     if (filter === \"active\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n//     }\r\n//     if (filter === \"completed\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType) {\r\n//         setFilter(value);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <input placeholder={'A lot of boring information'}/>\r\n//                     <div>\r\n//                         <button>Boring Button 1</button>\r\n//                         <button>Boring Button 2</button>\r\n//                         <button>Boring Button 3</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}/>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default App;"],"mappings":"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,gBAAgB,EAAEX,gBAAiB;UACnC,UAAU,EAAEK,UAAW;UACvB,UAAU,EAAEC,UAAW;UACvB,MAAM,EAAEF,EAAE,CAACR,MAAO;UAClB,kBAAkB,EAAEY;QAAW,GAP1BJ,EAAE,CAACV,EAAE;UAAA;UAAA;UAAA;QAAA;MAOuB;QAAA;QAAA;QAAA;MAAA,QACnC;IAEd,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAGA;AAEd;AAAC,GA1FQL,GAAG;AAAA,KAAHA,GAAG;AA4FZ,eAAeA,GAAG;;AA4BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}