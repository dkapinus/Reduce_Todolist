{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from \"./Todolist\";\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let todoListsID1 = v1();\n  let todoListsID2 = v1();\n  let [todoLists, SetTodoLists] = useState([{\n    id: todoListsID1,\n    title: \"Whats to learn\",\n    filter: \"All\"\n  }, {\n    id: todoListsID2,\n    title: \"Whats to buy\",\n    filter: \"All\"\n  }]);\n  let [tasks, setTask] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  let [filter, setFilter] = useState('all');\n  const FilterTask = nameButton => {\n    setFilter(nameButton);\n  };\n  const FilteredTask = () => {\n    let newArrayTask = tasks;\n    if (filter === 'active') {\n      newArrayTask = tasks.filter(el => el.isDone === false);\n    }\n    if (filter === 'completed') {\n      newArrayTask = tasks.filter(el => el.isDone === true);\n    }\n    return newArrayTask;\n  };\n  const removeTask = taskId => {\n    setTask(tasks.filter(el => el.id !== taskId));\n  };\n  const changeStatus = (id, isDone) => {\n    setTask(tasks.map(el => el.id === id ? {\n      ...el,\n      isDone: isDone\n    } : el));\n  };\n  const addMessage = valueInput => {\n    let newTask = {\n      id: v1(),\n      title: valueInput,\n      isDone: true\n    };\n    setTask([newTask, ...tasks]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: 'What to learn',\n      task: FilteredTask(),\n      FilterTask: FilterTask,\n      removeTask: removeTask,\n      changeStatus: changeStatus,\n      addMessage: addMessage,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"lzCHChbkNUtnfJ3sT/2ZPOf76W8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","App","todoListsID1","todoListsID2","todoLists","SetTodoLists","id","title","filter","tasks","setTask","isDone","setFilter","FilterTask","nameButton","FilteredTask","newArrayTask","el","removeTask","taskId","changeStatus","map","addMessage","valueInput","newTask"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid'\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    let todoListsID1=v1()\r\n    let todoListsID2=v1()\r\n\r\n    let [todoLists, SetTodoLists] = useState<TodoListsType[]>([\r\n        {id: todoListsID1, title: \"Whats to learn\", filter: \"All\"},\r\n        {id: todoListsID2, title: \"Whats to buy\", filter: \"All\"},\r\n\r\n    ])\r\n\r\n\r\n    let [ tasks, setTask] =useState([\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"ReactJS\", isDone: false },\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false}\r\n    ])\r\n\r\n   let[filter,setFilter] =useState<FilterValuesType>('all')\r\n\r\n\r\n      const FilterTask = (nameButton:FilterValuesType)=> {\r\n        setFilter(nameButton)\r\n       }\r\n\r\n       const FilteredTask = ()=> {\r\n        let newArrayTask=tasks\r\n        if (filter==='active'){newArrayTask=tasks.filter((el)=>el.isDone===false)}\r\n        if (filter==='completed'){newArrayTask=tasks.filter((el)=>el.isDone===true)}\r\n        return newArrayTask\r\n       }\r\n\r\n       const removeTask=(taskId:string)=>{\r\n\r\n        setTask(tasks.filter((el)=>el.id!==taskId))\r\n       }\r\n\r\n       const  changeStatus=(id:string,isDone:boolean)=>{\r\n      setTask(tasks.map((el)=>el.id===id ? {...el,isDone: isDone}: el))\r\n       }\r\n\r\n       const addMessage=(valueInput:string)=>{\r\n        let newTask= { id: v1(), title: valueInput, isDone: true }\r\n           setTask([newTask,...tasks])\r\n       }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n       <Todolist\r\n           title={'What to learn'}\r\n           task={FilteredTask()}\r\n           FilterTask={FilterTask}\r\n           removeTask={removeTask}\r\n           changeStatus={changeStatus}\r\n           addMessage={addMessage}\r\n           filter={filter}\r\n       />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}