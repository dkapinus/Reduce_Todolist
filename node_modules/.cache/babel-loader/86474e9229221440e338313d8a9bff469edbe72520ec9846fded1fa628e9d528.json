{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: {\n      data: [{\n        id: v1(),\n        title: \"HTML&CSS1111\",\n        isDone: true\n      }, {\n        id: v1(),\n        title: \"JS1111\",\n        isDone: true\n      }],\n      filter: \"all\"\n    },\n    [todolistId2]: {\n      data: [{\n        id: v1(),\n        title: \"HTML&CSS22222\",\n        isDone: true\n      }, {\n        id: v1(),\n        title: \"JS2222\",\n        isDone: true\n      }],\n      filter: \"all\"\n    }\n  });\n  const removeTodolist = todolistId => {\n    setTodolists(todolists.filter(el => el.id !== todolistId));\n    delete tasks[todolistId];\n  };\n  function removeTask(todolistId, taskId) {\n    setTasks({\n      ...tasks,\n      [todolistId]: {\n        ...tasks[todolistId],\n        data: tasks[todolistId].data.filter(el => el.id !== taskId)\n      }\n    });\n  }\n  function addTask(todolistId, title) {}\n  function changeStatus(todolistId, taskId, newIsDone) {\n    setTasks({\n      ...tasks,\n      [todolistId]: {\n        ...tasks[todolistId],\n        data: tasks[todolistId].data.map(el => el.id === taskId ? {\n          ...el,\n          isDone: newIsDone\n        } : el)\n      }\n    });\n  }\n  function changeFilter(todolistId, value) {\n    setTasks({\n      ...tasks,\n      [todolistId]: {\n        ...tasks[todolistId],\n        filter: value\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolists.map(el => {\n      let tasksForTodolist = tasks[el.id].data;\n      if (tasks[el.id].filter === \"active\") {\n        tasksForTodolist = tasks[el.id].data.filter(t => t.isDone === false);\n      }\n      if (tasks[el.id].filter === \"completed\") {\n        tasksForTodolist = tasks[el.id].data.filter(t => t.isDone === true);\n      }\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todolistId: el.id,\n        title: el.title,\n        tasks: tasksForTodolist,\n        removeTask: removeTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        changeTaskStatus: changeStatus,\n        filter: tasks[el.id].filter,\n        removeTodolist: removeTodolist\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"8+GEl5jvuYy1gZJ/bUztFLA5cJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","App","todolistId1","todolistId2","todolists","setTodolists","id","title","tasks","setTasks","data","isDone","filter","removeTodolist","todolistId","el","removeTask","taskId","addTask","changeStatus","newIsDone","map","changeFilter","value","tasksForTodolist","t"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n}\r\n\r\ntype TasksType = {\r\n    [key: string]: TasksssType\r\n}\r\n\r\ntype TasksssType = {\r\n    data:TaskType[]\r\n    filter:FilterValuesType\r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistId1, title: \"What to learn\"},\r\n        {id: todolistId2, title: \"What to buy\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistId1]: {\r\n            data: [\r\n                {id: v1(), title: \"HTML&CSS1111\", isDone: true},\r\n                {id: v1(), title: \"JS1111\", isDone: true}\r\n            ],\r\n            filter: \"all\"\r\n        },\r\n        [todolistId2]: {\r\n            data: [\r\n                {id: v1(), title: \"HTML&CSS22222\", isDone: true},\r\n                {id: v1(), title: \"JS2222\", isDone: true}\r\n            ],\r\n            filter: \"all\"\r\n        }\r\n    });\r\n\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolists(todolists.filter(el => el.id !== todolistId))\r\n        delete tasks[todolistId]\r\n\r\n    }\r\n\r\n\r\n    function removeTask(todolistId: string, taskId: string) {\r\n        setTasks({...tasks,[todolistId]:{...tasks[todolistId],data:tasks[todolistId].data.filter((el)=>el.id!==taskId )}})\r\n\r\n    }\r\n\r\n    function addTask(todolistId: string, title: string) {\r\n\r\n    }\r\n\r\n    function changeStatus(todolistId: string, taskId: string, newIsDone: boolean) {\r\nsetTasks({...tasks,[todolistId]:{...tasks[todolistId],data:tasks[todolistId].data.map((el)=>el.id===taskId ?{...el,isDone:newIsDone} : el)}})\r\n\r\n    }\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        setTasks({...tasks,[todolistId]:{...tasks[todolistId],filter:value}})\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((el) => {\r\n                let tasksForTodolist = tasks[el.id].data;\r\n                if (tasks[el.id].filter === \"active\") {\r\n                    tasksForTodolist = tasks[el.id].data.filter(t => t.isDone === false);\r\n                }\r\n                if (tasks[el.id].filter === \"completed\") {\r\n                    tasksForTodolist = tasks[el.id].data.filter(t => t.isDone === true);\r\n                }\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todolistId={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tasks[el.id].filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                )\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}