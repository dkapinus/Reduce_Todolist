{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { Input } from \"./Components/Input\";\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { ButtonAppBar } from \"./Components/ButtonAppBar\";\nimport { Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n  function removeTask(id, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId];\n    // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\n    tasks[todolistId] = todolistTasks.filter(t => t.id != id);\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n    setTasks({\n      ...tasks\n    });\n  }\n  function addTask(title, todolistId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId];\n    // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\n    tasks[todolistId] = [task, ...todolistTasks];\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n    setTasks({\n      ...tasks\n    });\n  }\n  function changeStatus(id, isDone, todolistId) {\n    //достанем нужный массив по todolistId:\n    let todolistTasks = tasks[todolistId];\n    // найдём нужную таску:\n    let task = todolistTasks.find(t => t.id === id);\n    //изменим таску, если она нашлась\n    if (task) {\n      task.isDone = isDone;\n      // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n      setTasks({\n        ...tasks\n      });\n    }\n  }\n  function changeFilter(value, todolistId) {\n    let todolist = todolists.find(tl => tl.id === todolistId);\n    if (todolist) {\n      todolist.filter = value;\n      setTodolists([...todolists]);\n    }\n  }\n  function removeTodolist(id) {\n    // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\n    setTodolists(todolists.filter(tl => tl.id != id));\n    // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\n    delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\n    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\n    setTasks({\n      ...tasks\n    });\n  }\n  const newAddInput = title => {\n    const newId = v1();\n    const newTodo = {\n      id: newId,\n      title: title,\n      filter: \"all\"\n    };\n    setTodolists([...todolists, newTodo]);\n    setTasks({\n      ...tasks,\n      [newId]: []\n    });\n  };\n  const changeTask = (todolistId, taskId, value) => {\n    setTasks({\n      ...tasks,\n      [todolistId]: tasks[todolistId].map(el => el.id === taskId ? {\n        ...el,\n        title: value\n      } : el)\n    });\n  };\n  const ChangeTodolistTitle = (todolistId, value) => {\n    setTodolists(todolists.map(el => el.id === todolistId ? {\n      ...el,\n      title: value\n    } : el));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      fixed: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          addTask: newAddInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        gap: 1,\n        children: todolists.map(tl => {\n          let allTodolistTasks = tasks[tl.id];\n          let tasksForTodolist = allTodolistTasks;\n          if (tl.filter === \"active\") {\n            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\n          }\n          if (tl.filter === \"completed\") {\n            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\n          }\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              style: {\n                padding: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Todolist, {\n                todolistId: tl.id,\n                title: tl.title,\n                tasks: tasksForTodolist,\n                removeTask: removeTask,\n                changeFilter: changeFilter,\n                addTask: addTask,\n                changeTaskStatus: changeStatus,\n                filter: tl.filter,\n                removeTodolist: removeTodolist,\n                changeTask: changeTask,\n                ChangeTodolistTitle: ChangeTodolistTitle\n              }, tl.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"oBqIIHMLlQKmdIMJ9W2fTLh0yUs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","Input","Container","Grid","ButtonAppBar","Paper","App","todolistId1","todolistId2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","todolistId","todolistTasks","t","addTask","task","changeStatus","find","changeFilter","value","todolist","tl","removeTodolist","newAddInput","newId","newTodo","changeTask","taskId","map","el","ChangeTodolistTitle","allTodolistTasks","tasksForTodolist","padding"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {Input} from \"./Components/Input\";\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Unstable_Grid2';\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {ButtonAppBar} from \"./Components/ButtonAppBar\";\r\nimport {Paper} from \"@mui/material\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const newAddInput = (title: string)=> {\r\n        const newId=v1()\r\n        const newTodo:TodolistType={id: newId, title: title, filter: \"all\"}\r\n        setTodolists([...todolists,newTodo])\r\n        setTasks({...tasks,[newId]:[]})\r\n    }\r\n\r\n    const changeTask = (todolistId: string,taskId:string,value:string)=> {\r\n\r\n        setTasks({...tasks,[todolistId]:tasks[todolistId].map((el)=>el.id===taskId? {...el,title:value}:el)})\r\n    }\r\n\r\n    const ChangeTodolistTitle = (todolistId: string,value:string)=> {\r\n        setTodolists(todolists.map((el)=>el.id===todolistId ? {...el,title:value}: el))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container maxWidth=\"sm\" fixed>\r\n                <Grid container>\r\n                    <Input addTask={newAddInput}/>\r\n                    </Grid>\r\n                <Grid container gap={1}  >\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return  <Grid  >\r\n                                <Paper style={{padding:'10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id} todolistId={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTask={changeTask}\r\n                                        ChangeTodolistTitle={ChangeTodolistTitle}\r\n\r\n                                    />\r\n                                </Paper>\r\n                               </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n\r\n\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}