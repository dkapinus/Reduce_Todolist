{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { v1 } from 'uuid';\nimport { Todolist } from \"./Todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  const removeTask = taskId => {\n    setTasks(tasks.filter(el => el.id !== taskId));\n  };\n  const AddMessage = value => {\n    let NewTask = {\n      id: v1(),\n      title: value,\n      isDone: true\n    };\n    setTasks([NewTask, ...tasks]);\n  };\n  const [filter, SetFilter] = useState('All');\n  let filtered = tasks;\n  if (filter === 'Active') {\n    filtered = tasks.filter(el => el.isDone === false);\n  }\n  if (filter === 'Completed') {\n    filtered = tasks.filter(el => el.isDone === true);\n  }\n  const filteredTask = nameButton => {\n    SetFilter(nameButton);\n  };\n  const changeStatus = (id, e) => {\n    setTasks(tasks.map(el => el.id === id ? {\n      ...el,\n      isDone: e\n    } : el));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: 'What to learn',\n      task: filtered,\n      removeTask: removeTask,\n      filteredTask: filteredTask,\n      AddMessage: AddMessage,\n      changeStatus: changeStatus,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ITiog9iGoR2OFlEc9xxfvZHubuo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","Todolist","App","tasks","setTasks","id","title","isDone","removeTask","taskId","filter","el","AddMessage","value","NewTask","SetFilter","filtered","filteredTask","nameButton","changeStatus","e","map"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid'\nimport {Todolist} from \"./Todolist\";\n\n\nexport type FilterValueType = 'All'|'Active'|'Completed'\n\nfunction App() {\n\n    let [tasks, setTasks] = useState([\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\n        {id: v1(), title: \"JS\", isDone: true},\n        {id: v1(), title: \"ReactJS\", isDone: false},\n        {id: v1(), title: \"Rest API\", isDone: false},\n        {id: v1(), title: \"GraphQL\", isDone: false},\n    ]);\n\n    const removeTask = (taskId:string)=> {\n        setTasks(tasks.filter((el)=>el.id!==taskId))\n    }\n\n    const AddMessage = (value:string)=> {\n        let NewTask = {id: v1(), title: value, isDone: true}\n\n        setTasks([NewTask,...tasks])\n    }\n\n    const [filter,SetFilter]=useState('All')\n\n    let filtered =tasks\n    if (filter==='Active'){filtered=tasks.filter((el)=>el.isDone===false)}\n    if (filter==='Completed'){filtered=tasks.filter((el)=>el.isDone===true)}\n\n\n    const filteredTask =(nameButton:FilterValueType)=> {\n  SetFilter(nameButton)\n    }\n\n    const changeStatus = (id:string,e:boolean)=> {\n        setTasks(tasks.map((el)=>el.id===id ? {...el,isDone: e}: el))\n    }\n    return (\n        <div className=\"App\">\n         <Todolist  title ={'What to learn'}\n                    task={filtered}\n                    removeTask={removeTask}\n                    filteredTask={filteredTask}\n                    AddMessage={AddMessage}\n                    changeStatus={changeStatus}\n                    filter={filter}/>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAQC,EAAE,QAAO,MAAM;AACvB,SAAQC,QAAQ,QAAO,YAAY;AAAC;AAKpC,SAASC,GAAG,GAAG;EAAA;EAEX,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAC7B;IAACM,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EACrC;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC5C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,CAC9C,CAAC;EAEF,MAAMC,UAAU,GAAIC,MAAa,IAAI;IACjCL,QAAQ,CAACD,KAAK,CAACO,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACN,EAAE,KAAGI,MAAM,CAAC,CAAC;EAChD,CAAC;EAED,MAAMG,UAAU,GAAIC,KAAY,IAAI;IAChC,IAAIC,OAAO,GAAG;MAACT,EAAE,EAAEL,EAAE,EAAE;MAAEM,KAAK,EAAEO,KAAK;MAAEN,MAAM,EAAE;IAAI,CAAC;IAEpDH,QAAQ,CAAC,CAACU,OAAO,EAAC,GAAGX,KAAK,CAAC,CAAC;EAChC,CAAC;EAED,MAAM,CAACO,MAAM,EAACK,SAAS,CAAC,GAAChB,QAAQ,CAAC,KAAK,CAAC;EAExC,IAAIiB,QAAQ,GAAEb,KAAK;EACnB,IAAIO,MAAM,KAAG,QAAQ,EAAC;IAACM,QAAQ,GAACb,KAAK,CAACO,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACJ,MAAM,KAAG,KAAK,CAAC;EAAA;EACrE,IAAIG,MAAM,KAAG,WAAW,EAAC;IAACM,QAAQ,GAACb,KAAK,CAACO,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACJ,MAAM,KAAG,IAAI,CAAC;EAAA;EAGvE,MAAMU,YAAY,GAAGC,UAA0B,IAAI;IACrDH,SAAS,CAACG,UAAU,CAAC;EACnB,CAAC;EAED,MAAMC,YAAY,GAAG,CAACd,EAAS,EAACe,CAAS,KAAI;IACzChB,QAAQ,CAACD,KAAK,CAACkB,GAAG,CAAEV,EAAE,IAAGA,EAAE,CAACN,EAAE,KAAGA,EAAE,GAAG;MAAC,GAAGM,EAAE;MAACJ,MAAM,EAAEa;IAAC,CAAC,GAAET,EAAE,CAAC,CAAC;EACjE,CAAC;EACD,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,uBACnB,QAAC,QAAQ;MAAE,KAAK,EAAG,eAAgB;MACxB,IAAI,EAAEK,QAAS;MACf,UAAU,EAAER,UAAW;MACvB,YAAY,EAAES,YAAa;MAC3B,UAAU,EAAEL,UAAW;MACvB,YAAY,EAAEO,YAAa;MAC3B,MAAM,EAAET;IAAO;MAAA;MAAA;MAAA;IAAA;EAAE;IAAA;IAAA;IAAA;EAAA,QACvB;AAEd;AAAC,GA7CQR,GAAG;AAAA,KAAHA,GAAG;AA+CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}