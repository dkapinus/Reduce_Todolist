{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [todolist, setTodolist] = useState([{\n    id: v1(),\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: v1(),\n    title: 'What to buy',\n    filter: 'all'\n  }]);\n  let todolistId1 = v1();\n  let todolistId2 = v1();\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"all\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"Milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React Book\",\n      isDone: true\n    }]\n  });\n  const deleteTask = id => {\n    let newTask = tasks.filter(el => el.id !== id);\n    setTasks(newTask);\n    return newTask;\n  };\n\n  // let [filtered,setFiltered]=useState<FilterValuesType>('all')\n\n  const filter = (todolistID, nameButton) => {\n    setTodolist(todolist.map(el => el.id === todolistID ? {\n      ...el,\n      filter: nameButton\n    } : el));\n  };\n  const addMessage = inputValue => {\n    let newTask = {\n      id: v1(),\n      title: inputValue,\n      isDone: true\n    };\n    setTasks([newTask, ...tasks]);\n  };\n\n  // const FilteredButton = ()=> {\n  //     let newTask =tasks\n  //     if(filtered==='active'){newTask=tasks.filter((el)=>el.isDone===false)}\n  //     if(filtered==='completed'){newTask=tasks.filter((el)=>el.isDone===true)}\n  //     return newTask\n  // }\n\n  const InputCheck = (event, id) => {\n    return setTasks(tasks.map(el => el.id === id ? {\n      ...el,\n      isDone: event\n    } : el));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolist.map(el => {\n      const FilteredButton = () => {\n        let newTask = tasks;\n        if (el.filter === 'active') {\n          newTask = tasks.filter(el => el.isDone === false);\n        }\n        if (el.filter === 'completed') {\n          newTask = tasks.filter(el => el.isDone === true);\n        }\n        return newTask;\n      };\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        task: FilteredButton(),\n        title: el.title,\n        todolistID: el.id,\n        filter: filter,\n        deleteTask: deleteTask,\n        addMessage: addMessage,\n        InputCheck: InputCheck,\n        Filter: el.filter\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"xl0gIk4YKMr1je8sVyiLchj/kW8=\");\n_c = App;\nexport default App;\n\n//-------------------------------------------------------------------------------------------------------\n//\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\n//\n// function App() {\n//\n//     let [tasks, setTasks] = useState([\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]);\n//\n//     function removeTask(id: string) {\n//         let filteredTasks = tasks.filter(t => t.id != id);\n//         setTasks(filteredTasks);\n//     }\n//\n//     function addTask(title: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         let newTasks = [task, ...tasks];\n//         setTasks(newTasks);\n//     }\n//\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n//\n//     let tasksForTodolist = tasks;\n//\n//     if (filter === \"active\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\n//     }\n//     if (filter === \"completed\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\n//     }\n//\n//     function changeFilter(value: FilterValuesType) {\n//         setFilter(value);\n//     }\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <input placeholder={'A lot of boring information'}/>\n//                     <div>\n//                         <button>Boring Button 1</button>\n//                         <button>Boring Button 2</button>\n//                         <button>Boring Button 3</button>\n//                     </div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}/>\n//         </div>\n//     );\n// }\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","App","todolist","setTodolist","id","title","filter","todolistId1","todolistId2","todolists","setTodolists","tasks","setTasks","isDone","deleteTask","newTask","el","todolistID","nameButton","map","addMessage","inputValue","InputCheck","event","FilteredButton"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\ntype TodolisistType ={\r\n    id:string,\r\n    title:string,\r\n    filter:FilterValuesType\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let [todolist,setTodolist]=useState<TodolisistType[]>([\r\n        {id:v1(),title:'What to learn',filter:'all'},\r\n        {id:v1(),title: 'What to buy',filter:'all'},\r\n    ])\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\nconst  deleteTask = (id:string)=> {\r\n\r\n   let  newTask=tasks.filter((el)=>el.id !==id)\r\n    setTasks(newTask)\r\n    return newTask\r\n}\r\n\r\n// let [filtered,setFiltered]=useState<FilterValuesType>('all')\r\n\r\nconst filter = (todolistID:string,nameButton:FilterValuesType)=> {\r\n\r\nsetTodolist(todolist.map((el)=>el.id===todolistID ? {...el,filter:nameButton}:el))\r\n}\r\n\r\nconst addMessage = (inputValue:string)=> {\r\n    let newTask = { id: v1(), title: inputValue, isDone: true }\r\n    setTasks([newTask,...tasks])\r\n }\r\n\r\n// const FilteredButton = ()=> {\r\n//     let newTask =tasks\r\n//     if(filtered==='active'){newTask=tasks.filter((el)=>el.isDone===false)}\r\n//     if(filtered==='completed'){newTask=tasks.filter((el)=>el.isDone===true)}\r\n//     return newTask\r\n// }\r\n\r\nconst InputCheck = (event:boolean,id:string)=> {\r\n    return setTasks(tasks.map((el)=>el.id===id ? {...el,isDone:event}:el))\r\n\r\n}\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolist.map((el)=>{\r\n                const FilteredButton = ()=> {\r\n                    let newTask =tasks\r\n                    if(el.filter==='active'){newTask=tasks.filter((el)=>el.isDone===false)}\r\n                    if(el.filter==='completed'){newTask=tasks.filter((el)=>el.isDone===true)}\r\n                    return newTask\r\n                }\r\n                return(\r\n                    <Todolist task={FilteredButton()}  title={el.title}\r\n                              key={el.id}\r\n                              todolistID={el.id}\r\n                              filter={filter}\r\n                              deleteTask={deleteTask}\r\n                              addMessage={addMessage}\r\n                              InputCheck={InputCheck}\r\n                              Filter={el.filter}/>\r\n                )\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\n//\r\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]);\r\n//\r\n//     function removeTask(id: string) {\r\n//         let filteredTasks = tasks.filter(t => t.id != id);\r\n//         setTasks(filteredTasks);\r\n//     }\r\n//\r\n//     function addTask(title: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         let newTasks = [task, ...tasks];\r\n//         setTasks(newTasks);\r\n//     }\r\n//\r\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n//\r\n//     let tasksForTodolist = tasks;\r\n//\r\n//     if (filter === \"active\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n//     }\r\n//     if (filter === \"completed\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType) {\r\n//         setFilter(value);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <input placeholder={'A lot of boring information'}/>\r\n//                     <div>\r\n//                         <button>Boring Button 1</button>\r\n//                         <button>Boring Button 2</button>\r\n//                         <button>Boring Button 3</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}/>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAASC,EAAE,QAAQ,MAAM;AAAC;AAW1B,SAASC,GAAG,GAAG;EAAA;EAEX,IAAI,CAACC,QAAQ,EAACC,WAAW,CAAC,GAACL,QAAQ,CAAmB,CAClD;IAACM,EAAE,EAACJ,EAAE,EAAE;IAACK,KAAK,EAAC,eAAe;IAACC,MAAM,EAAC;EAAK,CAAC,EAC5C;IAACF,EAAE,EAACJ,EAAE,EAAE;IAACK,KAAK,EAAE,aAAa;IAACC,MAAM,EAAC;EAAK,CAAC,CAC9C,CAAC;EAEF,IAAIC,WAAW,GAAGP,EAAE,EAAE;EACtB,IAAIQ,WAAW,GAAGR,EAAE,EAAE;EAEtB,IAAI,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAsB,CAC1D;IAACM,EAAE,EAAEG,WAAW;IAAEF,KAAK,EAAE,eAAe;IAAEC,MAAM,EAAE;EAAK,CAAC,EACxD;IAACF,EAAE,EAAEI,WAAW;IAAEH,KAAK,EAAE,aAAa;IAAEC,MAAM,EAAE;EAAK,CAAC,CACzD,CAAC;EAEF,IAAI,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAiB;IAC7C,CAACS,WAAW,GAAG,CACX;MAACH,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAE,UAAU;MAAEQ,MAAM,EAAE;IAAI,CAAC,EAC3C;MAACT,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAE,IAAI;MAAEQ,MAAM,EAAE;IAAI,CAAC,CACxC;IACD,CAACL,WAAW,GAAG,CACX;MAACJ,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAE,MAAM;MAAEQ,MAAM,EAAE;IAAI,CAAC,EACvC;MAACT,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAE,YAAY;MAAEQ,MAAM,EAAE;IAAI,CAAC;EAErD,CAAC,CAAC;EACN,MAAOC,UAAU,GAAIV,EAAS,IAAI;IAE/B,IAAKW,OAAO,GAACJ,KAAK,CAACL,MAAM,CAAEU,EAAE,IAAGA,EAAE,CAACZ,EAAE,KAAIA,EAAE,CAAC;IAC3CQ,QAAQ,CAACG,OAAO,CAAC;IACjB,OAAOA,OAAO;EAClB,CAAC;;EAED;;EAEA,MAAMT,MAAM,GAAG,CAACW,UAAiB,EAACC,UAA2B,KAAI;IAEjEf,WAAW,CAACD,QAAQ,CAACiB,GAAG,CAAEH,EAAE,IAAGA,EAAE,CAACZ,EAAE,KAAGa,UAAU,GAAG;MAAC,GAAGD,EAAE;MAACV,MAAM,EAACY;IAAU,CAAC,GAACF,EAAE,CAAC,CAAC;EAClF,CAAC;EAED,MAAMI,UAAU,GAAIC,UAAiB,IAAI;IACrC,IAAIN,OAAO,GAAG;MAAEX,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAEgB,UAAU;MAAER,MAAM,EAAE;IAAK,CAAC;IAC3DD,QAAQ,CAAC,CAACG,OAAO,EAAC,GAAGJ,KAAK,CAAC,CAAC;EAC/B,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMW,UAAU,GAAG,CAACC,KAAa,EAACnB,EAAS,KAAI;IAC3C,OAAOQ,QAAQ,CAACD,KAAK,CAACQ,GAAG,CAAEH,EAAE,IAAGA,EAAE,CAACZ,EAAE,KAAGA,EAAE,GAAG;MAAC,GAAGY,EAAE;MAACH,MAAM,EAACU;IAAK,CAAC,GAACP,EAAE,CAAC,CAAC;EAE1E,CAAC;EAEG,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,UACfd,QAAQ,CAACiB,GAAG,CAAEH,EAAE,IAAG;MAChB,MAAMQ,cAAc,GAAG,MAAK;QACxB,IAAIT,OAAO,GAAEJ,KAAK;QAClB,IAAGK,EAAE,CAACV,MAAM,KAAG,QAAQ,EAAC;UAACS,OAAO,GAACJ,KAAK,CAACL,MAAM,CAAEU,EAAE,IAAGA,EAAE,CAACH,MAAM,KAAG,KAAK,CAAC;QAAA;QACtE,IAAGG,EAAE,CAACV,MAAM,KAAG,WAAW,EAAC;UAACS,OAAO,GAACJ,KAAK,CAACL,MAAM,CAAEU,EAAE,IAAGA,EAAE,CAACH,MAAM,KAAG,IAAI,CAAC;QAAA;QACxE,OAAOE,OAAO;MAClB,CAAC;MACD,oBACI,QAAC,QAAQ;QAAC,IAAI,EAAES,cAAc,EAAG;QAAE,KAAK,EAAER,EAAE,CAACX,KAAM;QAEzC,UAAU,EAAEW,EAAE,CAACZ,EAAG;QAClB,MAAM,EAAEE,MAAO;QACf,UAAU,EAAEQ,UAAW;QACvB,UAAU,EAAEM,UAAW;QACvB,UAAU,EAAEE,UAAW;QACvB,MAAM,EAAEN,EAAE,CAACV;MAAO,GANbU,EAAE,CAACZ,EAAE;QAAA;QAAA;QAAA;MAAA,QAMU;IAEtC,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAGA;AAEd;AAAC,GAhFQH,GAAG;AAAA,KAAHA,GAAG;AAkFZ,eAAeA,GAAG;;AA8BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}