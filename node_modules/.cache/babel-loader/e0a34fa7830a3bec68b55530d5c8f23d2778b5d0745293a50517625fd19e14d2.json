{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx\",\n  _s = $RefreshSig$();\n// import {useState} from \"react\";\n// import {v1} from \"uuid\";\n//\n// let [todolist,setTodolist]=useState<TodolistType[]>([\n//     {id:v1(),title:'What to learn',filter:'all'},\n//     {id:v1(),title: 'What to buy',filter:'all'},\n// ])\n//\n\n//\n\n//\n// let [tasks, setTasks] = useState({\n//     [todolistId1]: [\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ],\n//     [todolistId2]: [\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]\n// });\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { v1 } from 'uuid';\nimport { Todolist } from \"./Todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet todolistId1 = v1();\nlet todolistId2 = v1();\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState({\n    [todolistId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todolistId2]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }]\n  });\n  let [todolists, setTodolists] = useState([{\n    id: todolistId1,\n    title: \"What to learn\",\n    filter: \"All\"\n  }, {\n    id: todolistId2,\n    title: \"What to buy\",\n    filter: \"All\"\n  }]);\n  const removeTask = id => {\n    //let newTask=tasks.filter((el)=>el.id!=id)\n    //setTasks(newTask)\n  };\n\n  // let [nameButton,setNameButton]=useState<ButtonType>('All')\n\n  const ChangeFilter = (todolistId, nameButton) => {\n    setTodolists(todolists.map(el => el.id === todolistId ? {\n      ...el,\n      filter: nameButton\n    } : el));\n  };\n  const AddMessage = inputValue => {\n    let newTask = {\n      id: v1(),\n      title: inputValue,\n      isDone: true\n    };\n    //setTasks([newTask,...tasks])\n  };\n\n  const InputCheck = (event, id) => {\n    //setTasks(tasks.map((el)=>el.id=== id ? {...el,isDone:event}:el))\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolists.map(el => {\n      const Filtered = () => {\n        let filteredTask = tasks[el.id];\n        if (el.filter === 'Active') {\n          filteredTask = tasks[el.id].filter(el => el.isDone === false);\n        }\n        if (el.filter === 'Completed') {\n          filteredTask = tasks[el.id].filter(el => el.isDone === true);\n        }\n        return filteredTask;\n      };\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todolistId: el.id,\n        task: Filtered(),\n        name: el.title,\n        removeTask: removeTask,\n        ChangeFilter: ChangeFilter,\n        addMessage: AddMessage,\n        InputCheck: InputCheck,\n        Filter: el.filter\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"iV99/yereCIr1g+Maku0xZsjba8=\");\n_c = App;\nexport default App;\n\n//-------------------------------------------------------------------------------------------------------\n//\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\n//\n// function App() {\n//\n//     let [tasks, setTasks] = useState([\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]);\n//\n//     function removeTask(id: string) {\n//         let filteredTasks = tasks.filter(t => t.id != id);\n//         setTasks(filteredTasks);\n//     }\n//\n//     function addTask(title: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         let newTasks = [task, ...tasks];\n//         setTasks(newTasks);\n//     }\n//\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n//\n//     let tasksForTodolist = tasks;\n//\n//     if (filter === \"active\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\n//     }\n//     if (filter === \"completed\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\n//     }\n//\n//     function changeFilter(value: FilterValuesType) {\n//         setFilter(value);\n//     }\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <input placeholder={'A lot of boring information'}/>\n//                     <div>\n//                         <button>Boring Button 1</button>\n//                         <button>Boring Button 2</button>\n//                         <button>Boring Button 3</button>\n//                     </div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}/>\n//         </div>\n//     );\n// }\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","Todolist","todolistId1","todolistId2","App","tasks","setTasks","id","title","isDone","todolists","setTodolists","filter","removeTask","ChangeFilter","todolistId","nameButton","map","el","AddMessage","inputValue","newTask","InputCheck","event","Filtered","filteredTask"],"sources":["/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx"],"sourcesContent":["// import {useState} from \"react\";\r\n// import {v1} from \"uuid\";\r\n//\r\n// let [todolist,setTodolist]=useState<TodolistType[]>([\r\n//     {id:v1(),title:'What to learn',filter:'all'},\r\n//     {id:v1(),title: 'What to buy',filter:'all'},\r\n// ])\r\n//\r\n\r\n//\r\n\r\n//\r\n// let [tasks, setTasks] = useState({\r\n//     [todolistId1]: [\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ],\r\n//     [todolistId2]: [\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]\r\n// });\r\n\r\n\r\n\r\nimport React,{useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid'\r\nimport {Todolist} from \"./Todolist\";\r\n\r\n\r\ntype TodolistType= {\r\n    id:string;\r\n    title:string;\r\n    filter:ButtonType\r\n}\r\nexport type ButtonType ='All'|'Active'|'Completed'\r\n\r\nlet todolistId1 = v1();\r\nlet todolistId2 = v1();\r\n\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistId1] : [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        }\r\n    );\r\n\r\n\r\nlet [todolists, setTodolists] = useState<TodolistType[]>([\r\n    {id: todolistId1, title: \"What to learn\", filter: \"All\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"All\"}\r\n])\r\n\r\n    const removeTask = (id:string)=> {\r\n        //let newTask=tasks.filter((el)=>el.id!=id)\r\n        //setTasks(newTask)\r\n    }\r\n\r\n    // let [nameButton,setNameButton]=useState<ButtonType>('All')\r\n\r\n    const ChangeFilter = (todolistId:string,nameButton:ButtonType)=> {\r\n        setTodolists(todolists.map((el)=>el.id===todolistId ? {...el,filter:nameButton} :el))\r\n    }\r\n\r\n\r\n    const AddMessage = (inputValue:string)=> {\r\n        let newTask={id: v1(), title: inputValue, isDone: true}\r\n        //setTasks([newTask,...tasks])\r\n    }\r\n    const InputCheck = (event:boolean,id:string)=> {\r\n        //setTasks(tasks.map((el)=>el.id=== id ? {...el,isDone:event}:el))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((el)=>{\r\n                const Filtered = ()=> {\r\n                    let filteredTask=tasks[el.id]\r\n                    if(el.filter==='Active'){filteredTask=tasks[el.id].filter((el)=>el.isDone===false)}\r\n                    if(el.filter==='Completed'){filteredTask=tasks[el.id].filter((el)=>el.isDone===true)}\r\n                    return filteredTask\r\n                }\r\n\r\n                return(\r\n                    <Todolist\r\n                              key={el.id}\r\n                              todolistId={el.id}\r\n                              task={Filtered()}\r\n                              name={el.title}\r\n                              removeTask={removeTask}\r\n                              ChangeFilter={ChangeFilter}\r\n                              addMessage={AddMessage}\r\n                              InputCheck={InputCheck}\r\n                              Filter={el.filter}/>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\n//\r\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]);\r\n//\r\n//     function removeTask(id: string) {\r\n//         let filteredTasks = tasks.filter(t => t.id != id);\r\n//         setTasks(filteredTasks);\r\n//     }\r\n//\r\n//     function addTask(title: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         let newTasks = [task, ...tasks];\r\n//         setTasks(newTasks);\r\n//     }\r\n//\r\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n//\r\n//     let tasksForTodolist = tasks;\r\n//\r\n//     if (filter === \"active\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n//     }\r\n//     if (filter === \"completed\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType) {\r\n//         setFilter(value);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <input placeholder={'A lot of boring information'}/>\r\n//                     <div>\r\n//                         <button>Boring Button 1</button>\r\n//                         <button>Boring Button 2</button>\r\n//                         <button>Boring Button 3</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}/>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default App;"],"mappings":"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M,KAAG,IAAI,CAAC;QAAA;QACpF,OAAOgB,YAAY;MACvB,CAAC;MAED,oBACI,QAAC,QAAQ;QAEC,UAAU,EAAEP,EAAE,CAACX,EAAG;QAClB,IAAI,EAAEiB,QAAQ,EAAG;QACjB,IAAI,EAAEN,EAAE,CAACV,KAAM;QACf,UAAU,EAAEK,UAAW;QACvB,YAAY,EAAEC,YAAa;QAC3B,UAAU,EAAEK,UAAW;QACvB,UAAU,EAAEG,UAAW;QACvB,MAAM,EAAEJ,EAAE,CAACN;MAAO,GARbM,EAAE,CAACX,EAAE;QAAA;QAAA;QAAA;MAAA,QAQU;IAEtC,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEA;AAEd;AAAC,GA1EQH,GAAG;AAAA,KAAHA,GAAG;AA4EZ,eAAeA,GAAG;;AA4BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}